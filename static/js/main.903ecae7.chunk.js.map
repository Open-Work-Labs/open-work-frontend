{"version":3,"sources":["ColorModeSwitcher.tsx","assets/images/ultra-sound-money/1.jpeg","assets/images/ultra-sound-money/2.jpeg","assets/images/ultra-sound-money/1thumbnail.jpeg","assets/images/ultra-sound-money/2thumbnail.jpeg","pages/Challenge/ImageExamples/index.tsx","molecules/TimeLeft/index.tsx","pages/Challenge/Uploader/index.tsx","atoms/BorderedBox/index.tsx","atoms/BorderedAccordion/index.tsx","pages/Challenge/index.tsx","assets/images/much_wow.jpeg","pages/Home/index.tsx","pages/NotFound/index.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","getThumbBoundsFn","index","thumbnail","document","querySelectorAll","pageYScroll","window","pageYOffset","documentElement","scrollTop","rect","getBoundingClientRect","x","left","y","top","w","width","ImageExamples","imgs","options","bgOpacity","map","item","original","image","imgWidth","height","imgHeight","ref","open","src","className","alt","twoDigits","n","Block","value","label","alignItems","fontWeight","TimeLeft","date","renderer","days","hours","minutes","seconds","spacing","mt","Layout","input","previews","submitButton","dropzoneProps","files","maxFiles","extra","length","InputContent","textAlign","Uploader","getUploadParams","url","LayoutComponent","onSubmit","allFiles","console","log","f","meta","forEach","remove","classNames","inputLabelWithFiles","defaultClassNames","inputLabel","inputContent","BorderedBox","rest","styles","useStyleConfig","__css","BorderedAccordion","BorderedAccordionItem","borderBottom","borderTop","img1Thumbnail","img1","img2Thumbnail","img2","Challenge","m","bg","p","justifyContent","ml","align","fontFamily","as","Date","now","borderBottomRadius","colorScheme","defaultIndex","allowMultiple","flex","pb","Home","useEffect","scene","getElementById","Parallax","relativeInput","id","position","bottom","right","minH","direction","style","marginTop","to","rightIcon","AiOutlineArrowRight","muchWow","base","sm","md","lg","xl","NotFound","components","Border","variants","border","borderColor","colorMode","borderRadius","defaultProps","theme","extendTheme","config","initialColorMode","useSystemColorMode","colors","App","justify","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.903ecae7.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/1.57278d98.jpeg\";","export default __webpack_public_path__ + \"static/media/2.56e761de.jpeg\";","export default __webpack_public_path__ + \"static/media/1thumbnail.8e9c8e2d.jpeg\";","export default __webpack_public_path__ + \"static/media/2thumbnail.1dfd72e9.jpeg\";","import {\n  HStack,\n  Image,\n} from '@chakra-ui/react';\nimport { Gallery, Item } from 'react-photoswipe-gallery';\n\nconst getThumbBoundsFn = (index: number) => {\n\n  // find thumbnail element\n  var thumbnail = document.querySelectorAll('.thumbnails')[index];\n\n  // get window scroll Y\n  var pageYScroll = window.pageYOffset || document.documentElement.scrollTop; \n  // optionally get horizontal scroll\n\n  // get position of element relative to viewport\n  var rect = thumbnail.getBoundingClientRect(); \n\n  // w = width\n  return {x:rect.left, y:rect.top + pageYScroll - 3, w:rect.width};\n\n\n  // Good guide on how to get element coordinates:\n  // http://javascript.info/tutorial/coordinates\n}\n\ninterface ImageExamplesProps {\n  imgs: { image: string, thumbnail: string, imgWidth: number, imgHeight: number }[]\n}\nconst ImageExamples = ({ imgs }: ImageExamplesProps) => {\n  return (\n    <Gallery\n      options={{ bgOpacity: 0.8, getThumbBoundsFn: getThumbBoundsFn }}\n    >\n      <HStack>\n        {imgs.map((item) => (\n          <Item\n            original={item.image}\n            thumbnail={item.thumbnail}\n            width={item.imgWidth}\n            height={item.imgHeight}\n            \n          >\n            {({ ref, open }) => (\n              <Image\n                ref={ref as React.MutableRefObject<HTMLImageElement>}\n                onClick={open}\n                src={item.thumbnail}\n                className=\"thumbnails\"\n                alt=\"\"\n              />\n            )}\n          </Item>\n        ))}\n      </HStack>\n    </Gallery>\n  )\n}\n\nexport default ImageExamples;\n","import Countdown from 'react-countdown';\nimport {\n  HStack,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\n\nconst twoDigits = (n: number) => {\n  return n > 9 ? \"\" + n: \"0\" + n;\n}\n\n\ninterface BlockProps {\n  value: string;\n  label: string;\n}\nconst Block = ({ value, label }: BlockProps) => {\n  return (\n    <VStack alignItems=\"start\">\n      <Text fontSize={20} fontWeight={500}>\n        {value}\n      </Text>\n      <Text fontSize={15} fontWeight={400}>\n        {label}\n      </Text>\n    </VStack>\n  )\n}\ninterface TimeLeftProps {\n  date: number\n}\nconst TimeLeft = ({ date }: TimeLeftProps) => {\n  return (\n    <Countdown\n      date={date}\n      renderer={({ days, hours, minutes, seconds }) => (\n        <>\n          <HStack spacing={12} mt={6}>\n            <Block value={twoDigits(days)} label=\"Days\" />\n            <Block value={twoDigits(hours)} label=\"Hours\" />\n            <Block value={twoDigits(minutes)} label=\"Minutes\" />\n            <Block value={twoDigits(seconds)} label=\"Seconds\" />\n          </HStack>\n          {/* {twoDigits(days)}:{twoDigits(hours)}:{twoDigits(minutes)}:{twoDigits(seconds)} */}\n        </>\n      )}\n    />\n  );\n}\n\nexport default TimeLeft;\n","import {\n  Box,\n  Text,\n} from '@chakra-ui/react';\nimport Dropzone, { defaultClassNames, IDropzoneProps, ILayoutProps } from 'react-dropzone-uploader'\nimport 'react-dropzone-uploader/dist/styles.css';\n\n// add type defs to custom LayoutComponent prop to easily inspect props passed to injected components\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }: ILayoutProps) => {\n  return (\n    <div>\n      {previews}\n\n      <div {...dropzoneProps}>{files.length < maxFiles && input}</div>\n\n      {files.length > 0 && submitButton}\n    </div>\n  )\n}\n\nconst InputContent = () => {\n  return (\n    <Box textAlign=\"center\">\n      <Text color=\"teal\">Drop your meme here 🖐️🎤</Text>\n      <Text color=\"teal\">(JPEG, PNG, or GIF)</Text>\n    </Box>\n  );\n}\n\n\nconst Uploader = () => {\n  // add type defs to function props to get TS support inside function bodies,\n  // and not just where functions are passed as props into Dropzone\n  const getUploadParams: IDropzoneProps['getUploadParams'] = () => ({ url: 'https://httpbin.org/post' })\n\n  const handleSubmit: IDropzoneProps['onSubmit'] = (files, allFiles) => {\n    console.log(files.map(f => f.meta))\n    allFiles.forEach(f => f.remove())\n  }\n\n  return (\n    <Dropzone\n      getUploadParams={getUploadParams}\n      LayoutComponent={Layout}\n      onSubmit={handleSubmit}\n      classNames={{ inputLabelWithFiles: defaultClassNames.inputLabel }}\n      inputContent={<InputContent />}\n    />\n  )\n}\n\nexport default Uploader;\n","import { Box, useStyleConfig } from '@chakra-ui/react'\n\nfunction BorderedBox(props: any) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Border', { variant })\n\n  // Pass the computed styles into the `__css` prop\n  return <Box __css={styles} {...rest} />\n}\n\nexport default BorderedBox\n","import {\n  Accordion,\n  AccordionItem,\n  AccordionButton as BorderedAccordionButton,\n  AccordionIcon as BorderedAccordionIcon,\n  AccordionPanel as BorderedAccordionPanel,\n  useStyleConfig,\n} from '@chakra-ui/react'\n\nfunction BorderedAccordion(props: any) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Border', { variant })\n  console.log('styles', styles)\n\n  // Pass the computed styles into the `__css` prop\n  return <Accordion __css={styles} {...rest} />\n}\n\nfunction BorderedAccordionItem(props: any) {\n  const { variant, ...rest } = props\n\n  return <AccordionItem borderBottom={0} borderTop={0} {...rest} />\n}\n\nexport {\n  BorderedAccordion,\n  BorderedAccordionItem,\n  BorderedAccordionButton,\n  BorderedAccordionIcon,\n  BorderedAccordionPanel,\n};\n\nexport default BorderedAccordion\n","import {\n  useColorModeValue,\n  Box,\n  Text,\n  Heading,\n  VStack,\n  Flex,\n  Button,\n  Divider,\n  HStack,\n} from '@chakra-ui/react';\nimport { FaEthereum, FaClipboardCheck } from 'react-icons/fa';\nimport { AiOutlineAlignLeft } from 'react-icons/ai';\nimport './challenge.css';\nimport img1 from '../../assets/images/ultra-sound-money/1.jpeg'\nimport img2 from '../../assets/images/ultra-sound-money/2.jpeg'\nimport img1Thumbnail from '../../assets/images/ultra-sound-money/1thumbnail.jpeg';\nimport img2Thumbnail from '../../assets/images/ultra-sound-money/2thumbnail.jpeg';\nimport ImageExamples from './ImageExamples';\nimport TimeLeft from '../../molecules/TimeLeft';\nimport Uploader from './Uploader';\nimport BorderedBox from '../../atoms/BorderedBox';\nimport {\n  BorderedAccordion,\n  BorderedAccordionItem,\n  BorderedAccordionButton,\n  BorderedAccordionIcon,\n  BorderedAccordionPanel,\n} from '../../atoms/BorderedAccordion';\n\nconst imgs = [\n  {\n    thumbnail: img1Thumbnail,\n    image: img1,\n    imgWidth: 508,\n    imgHeight: 491,\n  },\n  {\n    thumbnail: img2Thumbnail,\n    image: img2,\n    imgWidth: 2702,\n    imgHeight: 1514,\n  },\n];\n\nconst Challenge = () => {\n  return (\n    <Box m=\"30px 85px\">\n      <Flex>\n        <Box width=\"40vw\" bg=\"black\" color=\"whiteAlpha.800\" p={4} alignItems=\"start\" justifyContent=\"start\">\n          <Text><b>Title:</b> Create an original Ultra Sound Money meme.</Text>\n          <Text><b>Posted by:</b> kylekaplan.eth</Text>\n          <Text><b>Start Date:</b> January 7th, 2022</Text>\n          <Text><b>End Date:</b> January 14th, 2022</Text>\n          <Text><b>Prize amount:</b> 0.01 ETH</Text>\n        </Box>\n        <Box ml={30}>\n          <VStack align=\"start\" spacing={5}>\n            <Heading\n              fontSize=\"4xl\"\n              fontWeight=\"bold\"\n              fontFamily=\"'Work Sans', sans-serif;\"\n            >\n              Create an original Ultra Sound Money meme.\n            </Heading>\n            <Text\n              fontSize=\"md\"\n              fontFamily=\"'Poppins', sans-serif\"\n              // color={useColorModeValue(\"gray.900\", \"#2081e2\")}\n              // color=\"#2081e2\"\n              // color=\"teal.200\"\n            >\n              By: <Text as=\"span\" color={useColorModeValue(\"teal.500\", \"teal.200\")}>kylekaplan.eth</Text>\n            </Text>\n          </VStack>\n          <BorderedBox\n            mt={8}\n            fontFamily=\"'Poppins', sans-serif\"\n          >\n            <Box p=\"20px\">\n              <Text fontSize={16}>\n                Challenge ends January 14, 2022 at 6:15am EST\n              </Text>\n              <TimeLeft date={Date.now() + 1000000000} />\n            </Box>\n            <Divider />\n            <Box\n              p={30}\n              bg={useColorModeValue(\"gray.100\", \"whiteAlpha.100\")}\n              borderBottomRadius={8}\n            >\n              <Text>\n                Challenge Prize:\n              </Text>\n              <HStack fontSize=\"30px\">\n                <FaEthereum />\n                <Text>0.01</Text>\n              </HStack>\n              <Button colorScheme=\"teal\" mt={4}>\n                Submit your meme\n              </Button>\n            </Box>\n          </BorderedBox>\n        </Box>\n      </Flex>\n      <Box height={30} />\n      <BorderedAccordion defaultIndex={[0]} allowMultiple>\n        <BorderedAccordionItem>\n          <h2>\n            <BorderedAccordionButton>\n              <Box\n                flex='1'\n                fontSize=\"lg\"\n                fontFamily=\"'Poppins', sans-serif\"\n              >\n                <HStack spacing={2}>\n                  <AiOutlineAlignLeft />\n                  <Text>Description</Text>\n                </HStack>\n              </Box>\n              <BorderedAccordionIcon />\n            </BorderedAccordionButton>\n          </h2>\n          <BorderedAccordionPanel pb={4} bg={useColorModeValue(\"gray.100\", \"whiteAlpha.100\")}>\n            <Text fontSize=\"lg\">\n              The meme must be in favor of the Ultra Sound Money idea and ideally funny and/or educational. I plan on using the meme in an educational series that teaches crypto through memes. Acceptable file formats include all image files, if using photoshop including the .psd file would be extra appreciated by the open source community.\n            </Text>\n          </BorderedAccordionPanel>\n        </BorderedAccordionItem>\n      </BorderedAccordion>\n\n      <Box height={30} />\n\n      <BorderedAccordion defaultIndex={[0]} allowMultiple>\n        <BorderedAccordionItem>\n            <h2>\n            <BorderedAccordionButton>\n              <Box\n                flex='1'\n                fontSize=\"lg\"\n                fontFamily=\"'Poppins', sans-serif\"\n              >\n                <HStack spacing={2}>\n                  <FaClipboardCheck />\n                  <Text>Examples</Text>\n                </HStack>\n              </Box>\n              <BorderedAccordionIcon />\n            </BorderedAccordionButton>\n            </h2>\n            <BorderedAccordionPanel pb={4} bg={useColorModeValue(\"gray.100\", \"whiteAlpha.100\")}>\n              {/* <Text fontSize=\"2xl\">\n                <b>Good Examples:</b>\n              </Text> */}\n              <ImageExamples imgs={imgs} />\n            </BorderedAccordionPanel>\n          </BorderedAccordionItem>\n      </BorderedAccordion>\n      {/* <VStack marginTop=\"30px\" fontSize=\"lg\" spacing=\"5px\" align=\"start\">\n        <Text>\n          🏆 &nbsp; Ξ0.01 ETH\n        </Text>\n        <Text>\n          📅 &nbsp;Jan. 7th - 14th\n        </Text>\n        <Text>\n          ⏳ &nbsp;\n          <TimeLeft date={Date.now() + 100000000} />\n        </Text>\n        <Text fontSize=\"2xl\">\n          <b>Good Examples:</b>\n        </Text>\n        <ImageExamples imgs={imgs} />\n      </VStack> */}\n      <Box height={75} />\n      <Uploader />\n    </Box>\n  );\n}\n\nexport default Challenge;\n","export default __webpack_public_path__ + \"static/media/much_wow.8624a0da.jpeg\";","import { useEffect } from 'react';\nimport {\n  Box,\n  Text,\n  Button,\n  VStack,\n  Stack,\n  Heading,\n  Icon,\n  Image,\n} from \"@chakra-ui/react\";\nimport Parallax from 'parallax-js'\nimport {\n  Link\n} from 'react-router-dom';\nimport { AiOutlineArrowRight } from 'react-icons/ai';\nimport './home.css';\nimport muchWow from '../../assets/images/much_wow.jpeg';\n\nconst Home = () => {\n\n  useEffect(() => {\n    var scene = document.getElementById('scene');\n    new Parallax(scene, {\n      relativeInput: true\n    });    \n  }, []);\n\n  return (\n    <>\n    {/* Parallax background image */}\n    <Box\n      id=\"scene\"\n      data-relative-input=\"true\"\n      position=\"absolute\"\n      top=\"0\"\n      bottom=\"0\"\n      right=\"0\"\n      left=\"0\"\n    >\n      <Box\n        minH=\"90vh\"\n        data-depth=\"0.2\"\n        className='background5'\n      />\n    </Box>\n    {/* Start of regular content */}\n    <Box>\n      <VStack\n        spacing={3}\n        minH=\"66vh\"\n        textAlign=\"center\"\n        justifyContent=\"center\"\n      >\n        <Heading\n          fontSize='6xl'\n          fontWeight='extrabold'\n          // fontFamily='\"Baloo Bhaijaan 2\"'\n          className='headerText'\n        >\n          Earn Crypto by Making Memes\n        </Heading>\n        <Text\n          color='gray.350'\n          fontSize=\"3xl\"\n        >\n          The best meme wins. All memes are open source.\n        </Text>\n        <Stack direction='row' spacing={4} style={{ marginTop: '30px' }}>\n          <Link to=\"/challenge\">\n            <Button\n              rightIcon={<Icon as={AiOutlineArrowRight} />}\n              // colorScheme=\"#48BB78\"\n              colorScheme=\"teal\"\n              // color='white'\n              // bgGradient=\"linear-gradient(163.91deg,#944af2 18.37%,#448fff 82.04%)\"\n              variant='solid'\n              size=\"lg\"\n              height='56px'\n              className=\"ctaButton\"\n            >\n              Get Started\n            </Button>\n          </Link>\n        </Stack>\n        <Image\n          src={muchWow}\n          className=\"dogeImg\"\n          alt=\"Doge meme\"\n          width={{ base: 290, sm: 290, md: 290, lg: 333, xl: 333 }}\n        />\n      </VStack>\n      <VStack\n        minH={{ base: '35vh', sm: \"35vh\", md: \"23vh\", lg: \"23vh\", xl: \"23vh\" }}\n      />\n    </Box>\n    </>\n  );\n}\n\nexport default Home;\n","import {\n  Box,\n} from '@chakra-ui/react';\n\nconst NotFound = () => {\n  return (\n    <Box>\n      Page not found.\n    </Box>\n  )\n}\n\nexport default NotFound;\n","import {\n  ChakraProvider,\n  extendTheme,\n  ThemeConfig,\n  Box,\n  Flex,\n} from '@chakra-ui/react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from 'react-router-dom'\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\nimport './app.css';\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport Challenge from \"./pages/Challenge\";\nimport Home from \"./pages/Home\"\nimport NotFound from \"./pages/NotFound\";\n\n\nconst colors = {\n  // brand: {\n  //   900: '#1a365d',\n  //   800: '#153e75',\n  //   700: '#2a69ac',\n  // }\n}\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n}\n\nconst Border = {\n  variants: {\n    'thin': (props: any) => ({\n      border: '1px solid',\n      borderColor: props.colorMode === 'light' ? 'gray.200' : 'whiteAlpha.300',\n      borderRadius: '8px',\n    }),\n    'thick': (props: any) => ({\n      border: '4px solid',\n      borderColor: props.colorMode === 'light' ? 'gray.200' : 'whiteAlpha.300',\n      borderRadius: '8px',\n    }),\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'thin',\n  },\n}\n\nconst components = {\n  Border,\n}\n\nconst theme = extendTheme({ config, colors, components })\n\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Router>\n      <Box p={3}>\n        <Flex justify=\"end\">\n          <ColorModeSwitcher />\n        </Flex>\n        <Routes>\n          <Route path=\"/\" element={<Home/>}/>\n          <Route path=\"/challenge\" element={<Challenge/>}/>\n          {/* <Route path=\"/recovery-password\" element={<RecoveryPassword/>}/> */}\n          <Route path=\"*\" element={<NotFound/>}/>\n        </Routes>\n      </Box>\n    </Router>\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}