{"version":3,"sources":["ColorModeSwitcher.tsx","assets/images/ultra-sound-money/1.jpeg","assets/images/ultra-sound-money/2.jpeg","assets/images/ultra-sound-money/1thumbnail.jpeg","assets/images/ultra-sound-money/2thumbnail.jpeg","pages/Challenge/ImageExamples/index.tsx","molecules/TimeLeft/index.tsx","pages/Challenge/Uploader/index.tsx","atoms/BorderedBox/index.tsx","atoms/BorderedAccordion/index.tsx","organsims/Footer/index.tsx","pages/Challenge/NFTViewer.tsx/index.tsx","pages/Challenge/index.tsx","assets/images/much_wow.jpeg","pages/Home/index.tsx","pages/NotFound/index.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","getThumbBoundsFn","index","thumbnail","document","querySelectorAll","pageYScroll","window","pageYOffset","documentElement","scrollTop","rect","getBoundingClientRect","x","left","y","top","w","width","ImageExamples","imgs","options","bgOpacity","map","item","original","image","imgWidth","height","imgHeight","ref","open","src","className","alt","twoDigits","n","Block","value","label","alignItems","fontWeight","TimeLeft","date","renderer","days","hours","minutes","seconds","spacing","base","md","lg","xl","mt","Layout","input","previews","submitButton","dropzoneProps","files","maxFiles","extra","length","InputContent","textAlign","sx","useStyleConfig","Uploader","bdrClr","colorMode","getUploadParams","url","LayoutComponent","onSubmit","allFiles","console","log","f","meta","forEach","remove","classNames","inputLabelWithFiles","defaultClassNames","inputLabel","styles","dropzone","borderColor","position","padding","inputContent","BorderedBox","rest","BorderedAccordion","BorderedAccordionItem","borderBottom","borderTop","Footer","p","href","isExternal","textDecoration","NFTViewer","title","postedBy","startDate","endDate","prizeAmount","bg","img1Thumbnail","img1","img2Thumbnail","img2","data","Challenge","useBreakpointValue","Date","m","maxWidth","display","ml","align","fontFamily","as","toLocaleString","month","day","year","hour","minute","timeZone","getTime","borderBottomRadius","colorScheme","defaultIndex","allowMultiple","flex","pb","overflow","Home","useEffect","scene","getElementById","Parallax","relativeInput","id","bottom","right","minH","justifyContent","direction","style","marginTop","to","rightIcon","AiOutlineArrowRight","muchWow","sm","NotFound","components","Border","variants","border","borderRadius","defaultProps","Text","Background","backgroundColor","theme","extendTheme","config","initialColorMode","useSystemColorMode","colors","App","basename","justify","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b95ba28f.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/1.57278d98.jpeg\";","export default __webpack_public_path__ + \"static/media/2.56e761de.jpeg\";","export default __webpack_public_path__ + \"static/media/1thumbnail.8e9c8e2d.jpeg\";","export default __webpack_public_path__ + \"static/media/2thumbnail.1dfd72e9.jpeg\";","import {\n  HStack,\n  Image,\n} from '@chakra-ui/react';\nimport { Gallery, Item } from 'react-photoswipe-gallery';\n\nconst getThumbBoundsFn = (index: number) => {\n\n  // find thumbnail element\n  var thumbnail = document.querySelectorAll('.thumbnails')[index];\n\n  // get window scroll Y\n  var pageYScroll = window.pageYOffset || document.documentElement.scrollTop; \n  // optionally get horizontal scroll\n\n  // get position of element relative to viewport\n  var rect = thumbnail.getBoundingClientRect(); \n\n  // w = width\n  return {x:rect.left, y:rect.top + pageYScroll - 3, w:rect.width};\n\n\n  // Good guide on how to get element coordinates:\n  // http://javascript.info/tutorial/coordinates\n}\n\ninterface ImageExamplesProps {\n  imgs: { image: string, thumbnail: string, imgWidth: number, imgHeight: number }[]\n}\nconst ImageExamples = ({ imgs }: ImageExamplesProps) => {\n  return (\n    <Gallery\n      options={{ bgOpacity: 0.8, getThumbBoundsFn: getThumbBoundsFn }}\n    >\n      <HStack>\n        {imgs.map((item) => (\n          <Item\n            original={item.image}\n            thumbnail={item.thumbnail}\n            width={item.imgWidth}\n            height={item.imgHeight}\n            \n          >\n            {({ ref, open }) => (\n              <Image\n                ref={ref as React.MutableRefObject<HTMLImageElement>}\n                onClick={open}\n                src={item.thumbnail}\n                className=\"thumbnails\"\n                alt=\"\"\n              />\n            )}\n          </Item>\n        ))}\n      </HStack>\n    </Gallery>\n  )\n}\n\nexport default ImageExamples;\n","import Countdown from 'react-countdown';\nimport {\n  HStack,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\n\nconst twoDigits = (n: number) => {\n  return n > 9 ? \"\" + n: \"0\" + n;\n}\n\n\ninterface BlockProps {\n  value: string;\n  label: string;\n}\nconst Block = ({ value, label }: BlockProps) => {\n  return (\n    <VStack alignItems=\"start\">\n      <Text fontSize={20} fontWeight={500}>\n        {value}\n      </Text>\n      <Text fontSize={15} fontWeight={400}>\n        {label}\n      </Text>\n    </VStack>\n  )\n}\ninterface TimeLeftProps {\n  date: number\n}\nconst TimeLeft = ({ date }: TimeLeftProps) => {\n  return (\n    <Countdown\n      date={date}\n      renderer={({ days, hours, minutes, seconds }) => (\n        <>\n          <HStack spacing={{ base: 6, md: 8, lg: 10, xl: 12 }} mt={6}>\n            <Block value={twoDigits(days)} label=\"Days\" />\n            <Block value={twoDigits(hours)} label=\"Hours\" />\n            <Block value={twoDigits(minutes)} label=\"Minutes\" />\n            <Block value={twoDigits(seconds)} label=\"Seconds\" />\n          </HStack>\n          {/* {twoDigits(days)}:{twoDigits(hours)}:{twoDigits(minutes)}:{twoDigits(seconds)} */}\n        </>\n      )}\n    />\n  );\n}\n\nexport default TimeLeft;\n","import {\n  VStack,\n  Text,\n  useColorMode,\n  useStyleConfig,\n  Flex,\n} from '@chakra-ui/react';\nimport Dropzone, { defaultClassNames, IDropzoneProps, ILayoutProps } from 'react-dropzone-uploader'\nimport 'react-dropzone-uploader/dist/styles.css';\n\n// add type defs to custom LayoutComponent prop to easily inspect props passed to injected components\nconst Layout = ({ input, previews, submitButton, dropzoneProps, files, extra: { maxFiles } }: ILayoutProps) => {\n  return (\n    <div>\n      {previews}\n\n      <div {...dropzoneProps}>{files.length < maxFiles && input}</div>\n\n      {files.length > 0 && submitButton}\n    </div>\n  )\n}\n\nconst InputContent = () => {\n  return (\n    <VStack spacing={2} textAlign=\"center\">\n      <Text sx={useStyleConfig('Text', { variant: 'teal' })} fontSize=\"3xl\">Drop your meme here 🖐️🎤</Text>\n      <Text\n        sx={useStyleConfig('Text', { variant: 'blackAndWhite' })}\n        fontSize=\"lg\"\n      >\n        (JPG, JPEG, PNG, GIF, SVG, ect.)\n      </Text>\n      <Text\n        sx={useStyleConfig('Text', { variant: 'blackAndWhite' })}\n        fontSize=\"lg\"\n      >\n        Be an open source hero and also include the raw files (PSD, PXD, TIFF, ect.)\n      </Text>\n    </VStack>\n  );\n}\n\n\nconst Uploader = () => {\n  // add type defs to function props to get TS support inside function bodies,\n  // and not just where functions are passed as props into Dropzone\n  const getUploadParams: IDropzoneProps['getUploadParams'] = () => ({ url: 'https://httpbin.org/post' })\n\n  const handleSubmit: IDropzoneProps['onSubmit'] = (files, allFiles) => {\n    console.log(files.map(f => f.meta))\n    allFiles.forEach(f => f.remove())\n  }\n  \n  const { colorMode } = useColorMode()\n  const bdrClr = colorMode === 'light' ? \"#E2E8F0\" : \"#ffffff29\";\n\n  return (\n    <Dropzone\n      getUploadParams={getUploadParams}\n      LayoutComponent={Layout}\n      onSubmit={handleSubmit}\n      classNames={{\n        inputLabelWithFiles: defaultClassNames.inputLabel\n      }}\n      styles={{\n        dropzone: { borderColor: bdrClr, width: '100%' },\n        inputLabel: { position: 'relative', padding: \"80px 30px\" , width: '100%' },\n      }}\n      inputContent={<InputContent />}\n    />\n  )\n}\n\nexport default Uploader;\n","import { Box, useStyleConfig } from '@chakra-ui/react'\n\nfunction BorderedBox(props: any) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Border', { variant })\n\n  // Pass the computed styles into the `__css` prop\n  return <Box sx={styles} {...rest} />\n}\n\nexport default BorderedBox\n","import {\n  Accordion,\n  AccordionItem,\n  AccordionButton as BorderedAccordionButton,\n  AccordionIcon as BorderedAccordionIcon,\n  AccordionPanel as BorderedAccordionPanel,\n  useStyleConfig,\n} from '@chakra-ui/react'\n\nfunction BorderedAccordion(props: any) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Border', { variant })\n  console.log('styles', styles)\n\n  return <Accordion sx={styles} {...rest} />\n}\n\nfunction BorderedAccordionItem(props: any) {\n  const { variant, ...rest } = props\n\n  return <AccordionItem borderBottom={0} borderTop={0} {...rest} />\n}\n\nexport {\n  BorderedAccordion,\n  BorderedAccordionItem,\n  BorderedAccordionButton,\n  BorderedAccordionIcon,\n  BorderedAccordionPanel,\n};\n\nexport default BorderedAccordion\n","import {\n  Text,\n  Link,\n  VStack,\n} from '@chakra-ui/react';\n\nconst Footer = () => {\n  return (\n    <VStack mt={7} p={10} textAlign=\"center\">\n      <Text>\n        We ❤️ open source (duh).\n      </Text>\n      <Text>\n        View or contribute to our code on{' '}\n        <Link\n          href=\"https://github.com/kylekaplan/open-work\"\n          isExternal\n          textDecoration=\"underline\"\n        >\n          Github\n        </Link>\n        {'.'}\n      </Text>\n    </VStack>\n  )\n}\n\nexport default Footer;\n","import { Box, DarkMode, Text } from \"@chakra-ui/react\";\n\ninterface NFTViewerProps {\n  title: string;\n  postedBy: string;\n  startDate: string;\n  endDate: string;\n  prizeAmount: string;\n}\nconst NFTViewer = ({\n  title,\n  postedBy,\n  startDate,\n  endDate,\n  prizeAmount,\n}: NFTViewerProps) => {\n  return (\n    <DarkMode>\n      <Box height=\"100%\" bg=\"black\" p={4}>\n        <Text><b>Title:</b> {title}</Text>\n        <Text><b>Posted by:</b> {postedBy}</Text>\n        <Text><b>Start Date:</b> {startDate}</Text>\n        <Text><b>End Date:</b> {endDate}</Text>\n        <Text><b>Prize amount:</b> {prizeAmount}</Text>\n      </Box>\n    </DarkMode>\n  );\n}\n\nexport default NFTViewer;\n","import {\n  Box,\n  Text,\n  Heading,\n  VStack,\n  Flex,\n  Button,\n  Divider,\n  HStack,\n  useStyleConfig,\n  useBreakpointValue,\n} from '@chakra-ui/react';\nimport { FaEthereum, FaClipboardCheck } from 'react-icons/fa';\nimport { AiOutlineAlignLeft } from 'react-icons/ai';\nimport './challenge.css';\nimport img1 from '../../assets/images/ultra-sound-money/1.jpeg'\nimport img2 from '../../assets/images/ultra-sound-money/2.jpeg'\nimport img1Thumbnail from '../../assets/images/ultra-sound-money/1thumbnail.jpeg';\nimport img2Thumbnail from '../../assets/images/ultra-sound-money/2thumbnail.jpeg';\nimport ImageExamples from './ImageExamples';\nimport TimeLeft from '../../molecules/TimeLeft';\nimport Uploader from './Uploader';\nimport BorderedBox from '../../atoms/BorderedBox';\nimport {\n  BorderedAccordion,\n  BorderedAccordionItem,\n  BorderedAccordionButton,\n  BorderedAccordionIcon,\n  BorderedAccordionPanel,\n} from '../../atoms/BorderedAccordion';\nimport Footer from '../../organsims/Footer';\nimport NFTViewer from './NFTViewer.tsx';\n\nconst imgs = [\n  {\n    thumbnail: img1Thumbnail,\n    image: img1,\n    imgWidth: 508,\n    imgHeight: 491,\n  },\n  {\n    thumbnail: img2Thumbnail,\n    image: img2,\n    imgWidth: 2702,\n    imgHeight: 1514,\n  },\n];\n\nconst data = {\n  title: 'Ultra Create an original Ultra Sound Money meme. Money',\n  postedBy: 'kylekaplan.eth',\n  startDate: 'January 7th, 2022',\n  endDate: 'January 14th, 2022',\n  prizeAmount: '0.01 ETH',\n};\n\nconst Challenge = () => {\n  const variant = useBreakpointValue({ base: 'outline', md: 'solid' });\n  console.log('variant', variant);\n  const endDate = new Date('Febuary 20, 2022 12:00:00');\n  return (\n    <Box m=\"0 auto\" padding={{ base: \"30px 5px\", md: \"30px 40px\", lg: \"30px 60px\", xl: \"30px 80px\" }} maxWidth=\"1600px\">\n      <Flex>\n        {/* NFT Viewer on large screens */}\n        <Box display={{ base: 'none', md: 'block' }}>\n          <NFTViewer\n            title={data.title}\n            postedBy={data.postedBy}\n            startDate={data.startDate}\n            endDate={data.endDate}\n            prizeAmount={data.prizeAmount}\n          />\n        </Box>\n        <Box ml={{ base: 0, md: 30 }}>\n          <VStack align=\"start\" spacing={5}>\n            <Heading\n              fontSize=\"4xl\"\n              fontWeight=\"bold\"\n              fontFamily=\"'Work Sans', sans-serif;\"\n            >\n              Create an original Ultra Sound Money meme.\n            </Heading>\n            {/* NFT Viewer on small screens */}\n            <Box width=\"100%\" display={{ base: 'block', md: 'none' }}>\n              <NFTViewer\n                title={data.title}\n                postedBy={data.postedBy}\n                startDate={data.startDate}\n                endDate={data.endDate}\n                prizeAmount={data.prizeAmount}\n              />\n            </Box>\n            <Text\n              fontSize=\"md\"\n              fontFamily=\"'Poppins', sans-serif\"\n            >\n              By: <Text as=\"span\" sx={useStyleConfig('Text', { variant: 'teal' })}>kylekaplan.eth</Text>\n            </Text>\n          </VStack>\n          <BorderedBox\n            mt={8}\n            fontFamily=\"'Poppins', sans-serif\"\n          >\n            <Box p=\"20px\">\n              <Text fontSize={16}>\n                Challenge ends {endDate.toLocaleString('default', { month: 'long', day: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', timeZone: 'EST' })} EST.\n              </Text>\n              <TimeLeft date={endDate.getTime()} />\n            </Box>\n            <Divider />\n            <Box\n              p={30}\n              sx={useStyleConfig('Background')}\n              borderBottomRadius={8}\n            >\n              <Text>\n                Prize:\n              </Text>\n              <HStack fontSize=\"30px\">\n                <FaEthereum />\n                <Text>0.01</Text>\n              </HStack>\n              <Button colorScheme=\"teal\" mt={4}>\n                Connect your wallet\n              </Button>\n            </Box>\n          </BorderedBox>\n        </Box>\n      </Flex>\n      <Box height={30} />\n      <BorderedAccordion width=\"100%\" defaultIndex={[0]} allowMultiple>\n        <BorderedAccordionItem>\n          <h2>\n            <BorderedAccordionButton>\n              <Box\n                flex='1'\n                fontSize=\"lg\"\n                fontFamily=\"'Poppins', sans-serif\"\n              >\n                <HStack spacing={2}>\n                  <AiOutlineAlignLeft />\n                  <Text>Description</Text>\n                </HStack>\n              </Box>\n              <BorderedAccordionIcon />\n            </BorderedAccordionButton>\n          </h2>\n          <BorderedAccordionPanel\n            pb={4}\n            sx={useStyleConfig('Background')}\n          >\n            <Text fontSize=\"lg\">\n              The meme must be in favor of the Ultra Sound Money idea and ideally funny and/or educational. I plan on using the meme in an educational series that teaches crypto through memes.\n            </Text>\n          </BorderedAccordionPanel>\n        </BorderedAccordionItem>\n      </BorderedAccordion>\n\n      <Box height={30} />\n\n      <BorderedAccordion width=\"100%\" defaultIndex={[0]} allowMultiple>\n        <BorderedAccordionItem>\n            <h2>\n            <BorderedAccordionButton>\n              <Box\n                flex='1'\n                fontSize=\"lg\"\n                fontFamily=\"'Poppins', sans-serif\"\n              >\n                <HStack spacing={2}>\n                  <FaClipboardCheck />\n                  <Text>Examples</Text>\n                </HStack>\n              </Box>\n              <BorderedAccordionIcon />\n            </BorderedAccordionButton>\n            </h2>\n            <BorderedAccordionPanel\n              pb={4}\n              sx={useStyleConfig('Background')}\n              overflow=\"scroll\"\n            >\n              <ImageExamples imgs={imgs} />\n            </BorderedAccordionPanel>\n          </BorderedAccordionItem>\n      </BorderedAccordion>\n      <Box height={{ base: 10, md: 30, lg: 75 }} />\n      <Uploader />\n      <Footer />\n    </Box>\n  );\n}\n\nexport default Challenge;\n","export default __webpack_public_path__ + \"static/media/much_wow.8624a0da.jpeg\";","import { useEffect } from 'react';\nimport {\n  Box,\n  Text,\n  Button,\n  VStack,\n  Stack,\n  Heading,\n  Icon,\n  Image,\n} from \"@chakra-ui/react\";\nimport Parallax from 'parallax-js'\nimport {\n  Link\n} from 'react-router-dom';\nimport { AiOutlineArrowRight } from 'react-icons/ai';\nimport './home.css';\nimport muchWow from '../../assets/images/much_wow.jpeg';\n\nconst Home = () => {\n\n  useEffect(() => {\n    var scene = document.getElementById('scene');\n    new Parallax(scene, {\n      relativeInput: true\n    });    \n  }, []);\n\n  return (\n    <>\n    {/* Parallax background image */}\n    <Box\n      id=\"scene\"\n      data-relative-input=\"true\"\n      position=\"absolute\"\n      top=\"0\"\n      bottom=\"0\"\n      right=\"0\"\n      left=\"0\"\n    >\n      <Box\n        minH=\"90vh\"\n        data-depth=\"0.2\"\n        className='background5'\n      />\n    </Box>\n    {/* Start of regular content */}\n    <Box>\n      <VStack\n        spacing={3}\n        minH=\"66vh\"\n        textAlign=\"center\"\n        justifyContent=\"center\"\n      >\n        <Heading\n          fontSize='6xl'\n          fontWeight='extrabold'\n          // fontFamily='\"Baloo Bhaijaan 2\"'\n          className='headerText'\n        >\n          Earn Crypto by Making Memes\n        </Heading>\n        <Text\n          color='gray.350'\n          fontSize=\"3xl\"\n        >\n          The best meme wins. All memes are open source.\n        </Text>\n        <Stack direction='row' spacing={4} style={{ marginTop: '30px' }}>\n          <Link to=\"/challenge\">\n            <Button\n              rightIcon={<Icon as={AiOutlineArrowRight} />}\n              // colorScheme=\"#48BB78\"\n              colorScheme=\"teal\"\n              // color='white'\n              // bgGradient=\"linear-gradient(163.91deg,#944af2 18.37%,#448fff 82.04%)\"\n              variant='solid'\n              size=\"lg\"\n              height='56px'\n              className=\"ctaButton\"\n            >\n              Get Started\n            </Button>\n          </Link>\n        </Stack>\n        <Image\n          src={muchWow}\n          className=\"dogeImg\"\n          alt=\"Doge meme\"\n          width={{ base: 290, sm: 290, md: 290, lg: 333, xl: 333 }}\n        />\n      </VStack>\n      <VStack\n        minH={{ base: '35vh', sm: \"35vh\", md: \"23vh\", lg: \"23vh\", xl: \"23vh\" }}\n      />\n    </Box>\n    </>\n  );\n}\n\nexport default Home;\n","import {\n  Box,\n} from '@chakra-ui/react';\n\nconst NotFound = () => {\n  return (\n    <Box>\n      Page not found.\n    </Box>\n  )\n}\n\nexport default NotFound;\n","import {\n  ChakraProvider,\n  extendTheme,\n  ThemeConfig,\n  Box,\n  Flex,\n} from '@chakra-ui/react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from 'react-router-dom'\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\nimport './app.css';\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport Challenge from \"./pages/Challenge\";\nimport Home from \"./pages/Home\"\nimport NotFound from \"./pages/NotFound\";\n\n\nconst colors = {\n  // brand: {\n  //   900: '#1a365d',\n  //   800: '#153e75',\n  //   700: '#2a69ac',\n  // }\n}\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n}\n\nconst Border = {\n  variants: {\n    'thin': (props: any) => ({\n      border: '1px solid',\n      borderColor: props.colorMode === 'light' ? 'gray.200' : 'whiteAlpha.300',\n      borderRadius: '8px',\n    }),\n    'thick': (props: any) => ({\n      border: '4px solid',\n      borderColor: props.colorMode === 'light' ? 'gray.200' : 'whiteAlpha.300',\n      borderRadius: '8px',\n    }),\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'thin',\n  },\n}\n\nconst Text = {\n  variants: {\n    'blackAndWhite': (props: any) => ({\n      color: props.colorMode === 'light' ? 'gray.800' : 'whiteAlpha.800',\n    }),\n    'teal': (props: any) => ({\n      color: props.colorMode === 'light' ? 'teal.500' : 'teal.200',\n    }),\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'blackAndWhite',\n  },\n}\n\nconst Background = {\n  variants: {\n    'shade': (props: any) => ({\n      backgroundColor: props.colorMode === 'light' ? 'gray.100' : 'whiteAlpha.100',\n    }),\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'shade',\n  },\n}\n\nconst components = {\n  Border,\n  Text,\n  Background,\n}\n\nconst theme = extendTheme({ config, colors, components })\n\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Router basename=\"/open-work\" >\n      <Box p={3}>\n        <Flex justify=\"end\">\n          <ColorModeSwitcher />\n        </Flex>\n        <Routes>\n          <Route path=\"/\" element={<Home/>}/>\n          <Route path=\"/challenge\" element={<Challenge/>}/>\n          <Route path=\"*\" element={<NotFound/>}/>\n        </Routes>\n      </Box>\n    </Router>\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}